name: Application Deployment

on:
  push:
    branches: [main]
    paths:
      - "src/**" # Anta att din applikationskod ligger i src-mappen
  workflow_dispatch: # Tillåter manuell körning

env:
  DOTNET_VERSION: "9.0.x"
  PUBLISH_DIR: "./publish"

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ./src

      - name: Build application
        run: dotnet build ./src --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ./src --no-build --verbosity normal

      - name: Publish application
        run: dotnet publish ./src -c Release -o ${{ env.PUBLISH_DIR }}

      - name: Zip published files
        run: |
          cd ${{ env.PUBLISH_DIR }}
          zip -r ../app-publish.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-publish
          path: app-publish.zip
          retention-days: 7

  deploy:
    name: Deploy to App Server
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-publish

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get VM connection details
        run: |
          # Hämta IP-adresser från senaste deployment
          DEPLOYMENT_OUTPUT=$(az deployment group show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name github-workflow-deployment \
            --query properties.outputs)

          BASTION_IP=$(echo $DEPLOYMENT_OUTPUT | jq -r '.bastionPublicIp.value')
          APP_SERVER_IP=$(echo $DEPLOYMENT_OUTPUT | jq -r '.appServerPrivateIp.value')

          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "APP_SERVER_IP=$APP_SERVER_IP" >> $GITHUB_ENV

      - name: Set up SSH key
        run: |
          # Skapa SSH-nycklar
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Lägg till kända värdar för att undvika SSH-kontroller
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create deployment script
        run: |
          cat > deploy-app.sh << 'EOL'
          #!/bin/bash
          set -e

          # Stoppa applikationstjänsten
          sudo systemctl stop dotnet-app

          # Ta bort gamla filer (behåll csproj för säkerhetskopia)
          find /app -type f -not -name "*.csproj" -delete

          # Extrahera nya filer
          unzip -o /tmp/app-publish.zip -d /app

          # Ställ in rättigheter
          sudo chown -R www-data:www-data /app

          # Starta om tjänsten
          sudo systemctl start dotnet-app

          # Vänta och verifiera att tjänsten startade
          sleep 5
          sudo systemctl status dotnet-app

          # Testa att applikationen svarar
          curl -s http://localhost:5000
          EOL

          chmod +x deploy-app.sh

      - name: Deploy to App Server via SSH
        run: |
          # Kopiera paket till Bastion Host
          scp app-publish.zip deploy-app.sh azureuser@${{ env.BASTION_IP }}:/tmp/

          # Kopiera filer från Bastion till App Server
          ssh azureuser@${{ env.BASTION_IP }} "scp /tmp/app-publish.zip /tmp/deploy-app.sh azureuser@${{ env.APP_SERVER_IP }}:/tmp/"

          # Kör deployment-skriptet på App Server
          ssh azureuser@${{ env.BASTION_IP }} "ssh azureuser@${{ env.APP_SERVER_IP }} 'bash /tmp/deploy-app.sh'"

          echo "Application deployment completed successfully!"
